service: serverless-framework-app

package:
  individually: true
  patterns:
    - "!*/**"
    - "!eslint.config.mjs"
    - "src/constants.js"
    - "src/lib/dynamodb.js"
    - "src/utils/unwrapTypes.js"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:Scan'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: !GetAtt DynamoDB.Arn
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub ${S3Bucket.Arn}/*

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb
  - serverless-s3-local

custom:
  aws-bucket-name: serverless-framework-app-janr-test-1-dev
  serverless-dynamodb:
    start:
      port: 8000
      docker: false
      inMemory: true
      migrate: true
      seed: true
    seed:
      users:
        sources:
          - table: usersTable
            sources: ['./local-seeders/users.json']
  s3:
    host: localhost
    directory: .s3
    allowMismatchedSignatures: true

resources:
  Resources:
    DynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          RestrictPublicBuckets: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          BlockPublicAcls: false
        BucketName: ${self:custom.aws-bucket-name}
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: statement1
              Resource: !Sub ${S3Bucket.Arn}/*
              Effect: "Allow"
              Principal: "*"
              Action:
                - "s3:GetObject"

functions:
  get-user:
    handler: src/functions/get-user/index.handler
    description: Returns the information of a single user
    package:
      patterns:
        - "src/functions/get-user/*"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true

  get-users:
    handler: src/functions/get-users/index.handler
    description: Returns a list of users
    package:
      patterns:
        - "src/functions/get-users/*"
    events:
      - http:
          path: users
          method: GET
          request:
            parameters:
              querystrings:
                lastKey: false

  create-user:
    handler: src/functions/create-user/index.handler
    description: Allows to register a new user into the application
    package:
      patterns:
        - "src/functions/create-user/*"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(src/schemas/user.json)}
  
  update-user:
    handler: src/functions/update-user/index.handler
    description: Allows to update a user record
    package:
      patterns:
        - "src/functions/update-user/*"
    events:
      - http:
          path: users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json:
                schema: ${file(src/schemas/user.json)}
                name: PostCreateModel
                description: 'Validation model for creating users'

  delete-user:
    handler: src/functions/delete-user/index.handler
    description: Allows to delete a user record
    package:
      patterns:
        - "src/functions/delete-user/*"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  
  create-signed-upload-url:
    handler: src/functions/create-signed-upload-url/index.handler
    description: Returns a signed S3 URL to upload an image
    package:
      patterns:
        - "src/functions/create-signed-upload-url/*"
        - "src/lib/s3.js"
        - "!src/lib/dynamodb.js"
    environment:
      AWS_S3_BUCKET_NAME: ${self:custom.aws-bucket-name}
    events:
      - http:
          path: signed-url
          method: POST
          request:
            schemas:
              application/json: ${file(src/schemas/signed-url.json)}
  thumbnail-generator:
    handler: src/functions/thumbnail-generator/index.handler
    package:
      patterns:
        - "node_modules/**"
        - "!node_modules/@eslint"
        - "!node_modules/@types"
        - "!node_modules/eslint"
        - "!node_modules/eslint-plugin-simple-import-sort"
        - "!node_modules/globals"
        - "!node_modules/serverless"
        - "!node_modules/serverless-*"
        - "!node_modules/typescript"
        - "!node_modules/typescript-eslint"
        - "!src/lib/dynamodb.js"
        - "src/functions/thumbnail-generator/*"
        - "src/lib/s3.js"
    events:
      - s3:
          bucket: ${self:custom.aws-bucket-name}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/
